{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectedUserId","titleSearch","onSearchByTitle","onSelectUserById","onSetTodosStatus","className","id","type","name","placeholder","value","onChange","target","event","map","todo","completed","key","readOnly","title","userId","onClick","defaultProps","request","url","fetch","then","response","json","getUser","CurrentUser","state","user","this","props","data","setState","prevProps","email","phone","onClearUser","React","Component","App","todosStatus","status","prepareTodos","visibleTodos","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f29a5005.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectedUserId,\n  titleSearch,\n  onSearchByTitle,\n  onSelectUserById,\n  onSetTodosStatus,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__filter-container\">\n      <input\n        className=\"TodoList__search\"\n        id=\"TodoList-search\"\n        type=\"text\"\n        name=\"TodoList-search\"\n        placeholder=\"Search\"\n        value={titleSearch}\n        onChange={({ target }) => onSearchByTitle(target)}\n      />\n\n      <select\n        name=\"TodoList-select\"\n        id=\"TodoList-select\"\n        className=\"TodoList__select\"\n        onChange={event => onSetTodosStatus(event.target.value)}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Active\">Active</option>\n        <option value=\"Completed\">Completed</option>\n\n      </select>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n\n        {todos.map(todo => (\n\n          <li\n            className={todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'}\n            key={todo.id}\n          >\n\n            <label>\n              <input type=\"checkbox\" readOnly />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={todo.userId === selectedUserId\n                ? `TodoList__user-button\n                   TodoList__user-button--selected\n                   button`\n                : `TodoList__user-button button`\n              }\n              type=\"button\"\n              onClick={() => {\n                onSelectUserById(todo.userId);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n\n          </li>\n        ))}\n\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedUserId: PropTypes.number,\n  titleSearch: PropTypes.string,\n  onSearchByTitle: PropTypes.func.isRequired,\n  onSelectUserById: PropTypes.func.isRequired,\n  onSetTodosStatus: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  selectedUserId: 0,\n  titleSearch: '',\n};\n","const baseUrl = 'https://mate-api.herokuapp.com';\n\nexport function request(url) {\n  return fetch(`${baseUrl}${url}`)\n    .then(response => response.json());\n}\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport PropTypes from 'prop-types';\n\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  };\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    getUser(userId)\n      .then(({ data }) => {\n        this.setState({ user: { ...data } });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    const { userId } = this.props;\n\n    getUser(userId)\n      .then(({ data }) => {\n        this.setState({ user: { ...data } });\n      });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n    const { onClearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected User: #${id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={onClearUser}\n        >\n          Clear\n        </button>\n\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    titleSearch: '',\n    todosStatus: 'All',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(({ data }) => this.setState({ todos: [...data] }));\n  }\n\n  onSelectUserById = (userId) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  onSearchByTitle = ({ value }) => {\n    this.setState({ titleSearch: value });\n  };\n\n  onSetTodosStatus = (status) => {\n    this.setState({ todosStatus: status });\n  };\n\n  onClearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  prepareTodos = () => {\n    const { todos, titleSearch, todosStatus } = this.state;\n\n    let visibleTodos = [...todos];\n\n    if (todosStatus === 'Active') {\n      visibleTodos = [...todos].filter(({ completed }) => !completed);\n    }\n\n    if (todosStatus === 'Completed') {\n      visibleTodos = [...todos].filter(({ completed }) => completed);\n    }\n\n    if (titleSearch) {\n      visibleTodos = [...visibleTodos].filter(todo => (\n        (`${todo.title}`).toLowerCase().includes(titleSearch.toLowerCase())\n      ));\n    }\n\n    return visibleTodos;\n  };\n\n  render() {\n    const { titleSearch, selectedUserId } = this.state;\n    const visibleTodos = this.prepareTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={visibleTodos}\n            selectedUserId={selectedUserId}\n            titleSearch={titleSearch}\n            onSearchByTitle={this.onSearchByTitle}\n            onSelectUserById={this.onSelectUserById}\n            onSetTodosStatus={this.onSetTodosStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearUser={this.onClearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}